<?php
/**
 * SearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GearLab Tools
 *
 * Authoritative documentation for querying the GearLab Tools API. Client SDKs are generated from this API specification.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation search
     *
     * Request pre-indexed search results
     *
     * @param  string $key The API Key as provided by SiteCrafting/GearLab (required)
     * @param  string $query Search string submitted by end user, e.g. \&quot;Holiday Party\&quot; or \&quot;Holiday+Party\&quot; (required)
     * @param  int $collection Your website&#39;s collection ID as provided by SiteCrafting/GearLab (required)
     * @param  int $res_offset The number of results to skip over when building the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time and wish to display the 3rd page of results, this would be ‘20’ so that you could skip over 20 results to get to results 21-30) (optional)
     * @param  int $res_length The number of results to include in the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time this would be ‘10’) (optional)
     * @param  string $meta_tag Category to limit results to. If this value is not specified, all pages will considered. If this value is specified then the result set will only include pages with the category specified in the meta tag. (e.g. ‘calendar-event’) (optional)
     * @param  string $literal_query Return results for the literal query phrased passed, and do not allow the presence of any “more probable suggestions” to supercede it. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SearchResponse
     */
    public function search($key, $query, $collection, $res_offset = null, $res_length = null, $meta_tag = null, $literal_query = null)
    {
        list($response) = $this->searchWithHttpInfo($key, $query, $collection, $res_offset, $res_length, $meta_tag, $literal_query);
        return $response;
    }

    /**
     * Operation searchWithHttpInfo
     *
     * Request pre-indexed search results
     *
     * @param  string $key The API Key as provided by SiteCrafting/GearLab (required)
     * @param  string $query Search string submitted by end user, e.g. \&quot;Holiday Party\&quot; or \&quot;Holiday+Party\&quot; (required)
     * @param  int $collection Your website&#39;s collection ID as provided by SiteCrafting/GearLab (required)
     * @param  int $res_offset The number of results to skip over when building the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time and wish to display the 3rd page of results, this would be ‘20’ so that you could skip over 20 results to get to results 21-30) (optional)
     * @param  int $res_length The number of results to include in the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time this would be ‘10’) (optional)
     * @param  string $meta_tag Category to limit results to. If this value is not specified, all pages will considered. If this value is specified then the result set will only include pages with the category specified in the meta tag. (e.g. ‘calendar-event’) (optional)
     * @param  string $literal_query Return results for the literal query phrased passed, and do not allow the presence of any “more probable suggestions” to supercede it. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($key, $query, $collection, $res_offset = null, $res_length = null, $meta_tag = null, $literal_query = null)
    {
        $returnType = '\Swagger\Client\Model\SearchResponse';
        $request = $this->searchRequest($key, $query, $collection, $res_offset, $res_length, $meta_tag, $literal_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAsync
     *
     * Request pre-indexed search results
     *
     * @param  string $key The API Key as provided by SiteCrafting/GearLab (required)
     * @param  string $query Search string submitted by end user, e.g. \&quot;Holiday Party\&quot; or \&quot;Holiday+Party\&quot; (required)
     * @param  int $collection Your website&#39;s collection ID as provided by SiteCrafting/GearLab (required)
     * @param  int $res_offset The number of results to skip over when building the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time and wish to display the 3rd page of results, this would be ‘20’ so that you could skip over 20 results to get to results 21-30) (optional)
     * @param  int $res_length The number of results to include in the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time this would be ‘10’) (optional)
     * @param  string $meta_tag Category to limit results to. If this value is not specified, all pages will considered. If this value is specified then the result set will only include pages with the category specified in the meta tag. (e.g. ‘calendar-event’) (optional)
     * @param  string $literal_query Return results for the literal query phrased passed, and do not allow the presence of any “more probable suggestions” to supercede it. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsync($key, $query, $collection, $res_offset = null, $res_length = null, $meta_tag = null, $literal_query = null)
    {
        return $this->searchAsyncWithHttpInfo($key, $query, $collection, $res_offset, $res_length, $meta_tag, $literal_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAsyncWithHttpInfo
     *
     * Request pre-indexed search results
     *
     * @param  string $key The API Key as provided by SiteCrafting/GearLab (required)
     * @param  string $query Search string submitted by end user, e.g. \&quot;Holiday Party\&quot; or \&quot;Holiday+Party\&quot; (required)
     * @param  int $collection Your website&#39;s collection ID as provided by SiteCrafting/GearLab (required)
     * @param  int $res_offset The number of results to skip over when building the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time and wish to display the 3rd page of results, this would be ‘20’ so that you could skip over 20 results to get to results 21-30) (optional)
     * @param  int $res_length The number of results to include in the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time this would be ‘10’) (optional)
     * @param  string $meta_tag Category to limit results to. If this value is not specified, all pages will considered. If this value is specified then the result set will only include pages with the category specified in the meta tag. (e.g. ‘calendar-event’) (optional)
     * @param  string $literal_query Return results for the literal query phrased passed, and do not allow the presence of any “more probable suggestions” to supercede it. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsyncWithHttpInfo($key, $query, $collection, $res_offset = null, $res_length = null, $meta_tag = null, $literal_query = null)
    {
        $returnType = '\Swagger\Client\Model\SearchResponse';
        $request = $this->searchRequest($key, $query, $collection, $res_offset, $res_length, $meta_tag, $literal_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search'
     *
     * @param  string $key The API Key as provided by SiteCrafting/GearLab (required)
     * @param  string $query Search string submitted by end user, e.g. \&quot;Holiday Party\&quot; or \&quot;Holiday+Party\&quot; (required)
     * @param  int $collection Your website&#39;s collection ID as provided by SiteCrafting/GearLab (required)
     * @param  int $res_offset The number of results to skip over when building the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time and wish to display the 3rd page of results, this would be ‘20’ so that you could skip over 20 results to get to results 21-30) (optional)
     * @param  int $res_length The number of results to include in the result set - useful for lazy-loading or paginating your results. (e.g. if you are displaying 10 results at a time this would be ‘10’) (optional)
     * @param  string $meta_tag Category to limit results to. If this value is not specified, all pages will considered. If this value is specified then the result set will only include pages with the category specified in the meta tag. (e.g. ‘calendar-event’) (optional)
     * @param  string $literal_query Return results for the literal query phrased passed, and do not allow the presence of any “more probable suggestions” to supercede it. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchRequest($key, $query, $collection, $res_offset = null, $res_length = null, $meta_tag = null, $literal_query = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling search'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling search'
            );
        }
        // verify the required parameter 'collection' is set
        if ($collection === null || (is_array($collection) && count($collection) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection when calling search'
            );
        }

        $resourcePath = '/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }
        // query params
        if ($collection !== null) {
            $queryParams['collection'] = ObjectSerializer::toQueryValue($collection);
        }
        // query params
        if ($res_offset !== null) {
            $queryParams['resOffset'] = ObjectSerializer::toQueryValue($res_offset);
        }
        // query params
        if ($res_length !== null) {
            $queryParams['resLength'] = ObjectSerializer::toQueryValue($res_length);
        }
        // query params
        if ($meta_tag !== null) {
            $queryParams['metaTag'] = ObjectSerializer::toQueryValue($meta_tag);
        }
        // query params
        if ($literal_query !== null) {
            $queryParams['literalQuery'] = ObjectSerializer::toQueryValue($literal_query);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
